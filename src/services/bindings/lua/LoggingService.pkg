// Binding log defines as functions
// TODO: use internal Lua traceback to get correct file and line
void S_LOG_VERBOSE(const char * message);
void S_LOG_INFO(const char * message);
void S_LOG_WARNING(const char * message);
void S_LOG_FAILURE(const char * message);
void S_LOG_CRITICAL(const char * message);

namespace Ember {


/**
 * Easy-to-deal-with logging class.
 *
 * This service class should make adding and observing logging messages more easy. This
 * can be done using printf-like log method or just streaming operator << in
 * cout-like way. 
 *
 * The cout-like way always needs a LoggingService::END_MESSAGE to be streamed-in 
 * last (use ENDM* macro). To specify formats like hexadecimal printing static functions
 * are available for conversion (use the HEX_NUM* macro).
 * 
 * NOTE: Since streaming actually constist of many operations that can be interrupted by
 * switching the active thread, streaming should only be used in thread safe areas. [TODO: How
 * to fix this unwanted behaviour?]
 *
 *
 * There are some log variants for which you can specify some options:
 * - source file (use __FILE__) 
 * - source line (use __LINE__)
 * - level of importance (see enum called MessageImportance), always INFO if not specified
 *
 * As a special feature you can use a function called slog* (abbr. for stream log) that can
 * be used for setting the options before using streaming. (See example.)  
 *
 * Observers of logging process can easily be managed 
 * using addObserver and removeObserver. An observer class handling FILE * is predefined already.
 *
 * To less the amount of messages passed through to the observers, you can specify a filter by
 * levels of importance. Thus all messages above or equal a filter level of importance are
 * written/passed by the callback to an observer.
 * 
 * 
 * HINT: Names marked with * were chosen this short, because they are intentended to be used very 
 * frequently.
 *
 * SAMPLE:
 * using namespace Ember::services;
 * LoggingService * logger;
 * //service is assumed to be started; observers are added
 *
 * //do you prefer this way?
 * logger->log(__FILE__, __LINE__, LoggingService::WARNING,
 *      "Player %s (ID: %x) is already dead (but used in %d new messages).", 
 *		player->getName(), player->getID(), player->getMessages()->getCount());
 *
 * //or this?
 * logger->slog(__FILE__, __LINE__, LoggingService::WARNING) << "Player: " << player->getName() 
 *		<<"(ID: " << HEX_NUM(player->getID()) << "is already dead (but used in " << 
 *      player->getMessages()->getCount() << " new messages)." << ENDM;
 *
 *
 * @author Tim Enderling
 */

    class LoggingService
    {
        //======================================================================
        // Public Constants and enums
        //======================================================================
      public:

        /**
	 * This enum contains all levels of message importance.
	 * -VERBOSE messages are for maxiumum level of verboseness and are emitted frequently with details of Ember's internal state.
	 * -INFO messages are intended to be read only to look for reasons of errors.
	 * -WARNING messages appear whenever something could get critical in some case.
	 * -CRITICAL messages should be read always and contain fatal errors.
	 */
        enum MessageImportance
        {
	  VERBOSE = 0,
	  INFO = 1,
	  WARNING = 2,
	  FAILURE = 3,
	  CRITICAL = 4
        };


        /**
	 * Pseudo-enum necessary to make the END_MESSAGE constant not be mixed with ints
	 */
        enum EndMessageEnum
        {
            END_MESSAGE = 0
        };

        //======================================================================
        // Inner Classes and typedefs
        //======================================================================



        //----------------------------------------------------------------------
        // Singleton

    /**
     * Gets an instance of the LoggingService
     */
    static Ember::LoggingService* getSingletonPtr();

    /**
     * Gets an instance of the LoggingService
     */
    static Ember::LoggingService& getSingleton();


    /**
     * Adds a message presented by various options, a format string and variable params like
     * in printf using also the same format specifications.
     *
     * @param file The source code file the message was initiated.
     * @param line The source code line the message was initiated.
     * @param importance The level of importance (see MessageImportance enum)
     * @param message The message format string.
     *
     */
        void log (const char *message);

        void log (const MessageImportance importance, const char *message);

    };
}

// Logging functions 
$[
function log.verbose(...)
	return S_LOG_VERBOSE(...)
end

function log.info(...)
	return S_LOG_INFO(...)
end

function log.warning(...)
	return S_LOG_WARNING(...)
end

function log.failure(...)
	return S_LOG_FAILURE(...)
end

function log.critical(...)
	return S_LOG_CRITICAL(...)
end
$]
