$#include "framework/EntityImporter.h"

namespace Ember
{

/**
 * @brief Imports a previously exported entity.
 */
class EntityImporter
{
public:
	struct ShortInfo
	{
		std::string filename;
		std::string name;
		std::string description;
		int entityCount;
	};

	/**
	 * @brief Contains various stats about the import process, to be shown in an UI or help with debugging.
	 */
	struct Stats {
		/**
		 * The total number of entities to process.
		 */
		unsigned int entitiesCount;
		/**
		 * The number of entities processed so far.
		 */
		unsigned int entitiesProcessedCount;
		/**
		 * The number of entity update ops sent.
		 */
		unsigned int entitiesUpdateCount;
		/**
		 * The number of entity creation ops sent.
		 */
		unsigned int entitiesCreateCount;
		/**
		 * The number of failed entity creation ops.
		 */
		unsigned int entitiesCreateErrorCount;
		/**
		 * The total number of minds to restore.
		 */
		unsigned int mindsCount;
		/**
		 * The total number of minds processed so far.
		 */
		unsigned int mindsProcessedCount;
	};

	explicit EntityImporter(Eris::Account& account);
	virtual ~EntityImporter();

	static std::vector<Ember::EntityImporter::ShortInfo> getInfoFromDirectory(const std::string& directoryPath);

	virtual void start(const std::string& filename);
	
	/**
	 * @brief Cancels the loading.
	 */
	void cancel();

	/**
	 * @brief Gets stats about the importing process.
	 * @return Stats about the process.
	 */
	const Ember::EntityImporter::Stats& getStats() const;

	/**
	 * @brief Emitted when the load has been completed.
	 */
	sigc::signal<void> EventCompleted;

	/**
	 * @brief Emitted when an entity has been updated or created.
	 *
	 * The argument denotes how many instances are left to load.
	 */
	sigc::signal<void> EventProgress;

};

}
