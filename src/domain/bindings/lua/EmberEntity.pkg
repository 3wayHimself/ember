$#include "EmberEntity.h"

namespace Ember {
class EmberEntity : public Eris::Entity {

	bool hasSuggestedResponses() const;
	
	const std::vector< std::string >& getSuggestedResponses() const;

	EmberEntity* getEmberLocation() const;
	
	inline bool isInitialized() const;

	/**
	 *    Returns a list of the default use operators that can be used with this entity.
	 For example, an axe would have a list of operators such as "chop" and "sharpen".
	 * @return 
	 */
	std::vector<std::string> getDefaultUseOperators();
	
	/**
	 *    Returns a list of actions that can be performed on this entity, if any.
	 * @return A vector of actions, as strings.
	 */
	std::vector<std::string> getActions();	
	
	/**
	 * General method for turning on and off debug visualizations. Subclasses might support more types of visualizations than the ones defined here.
	 * @param visualization The type of visualization. Currently supports "OgreBBox".
	 * @param visualize Whether to visualize or not.
	 */
	virtual void setVisualize(const std::string& visualization, bool visualize);
	
	
	/**
	 *    Gets whether a certain visualization is turned on or off.
	 * @param visualization The type of visualization. Currently supports "OgreBBox".
	 * @return true if visualization is turned on, else false
	 */
	virtual bool getVisualize(const std::string& visualization) const;
	
	/**
	 * @brief Dumps all of this entity's attributes to the supplied outstream.
	 * By default the entity will be exported using XML Atlas format.
	 * @param outstream The stream to write to.
	 * @param logOutstream The stream to which log messages will be written.
	 */
	void dumpAttributes(std::iostream& outstream, std::ostream& logOutstream) const;
	
	Ember::EmberEntity* getAttachedEntity(const std::string& namedPoint);
	
	/**
	 * @brief Emitted when the graphical representation changes.
	 */
	sigc::signal<void> EventChangedGraphicalRepresentation;
	
};
}
