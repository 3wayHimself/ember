/*
 Copyright (C) 2009 Erik Hjortsberg <erik.hjortsberg@gmail.com>

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef MODELREPRESENTATIONHUMANOID_H_
#define MODELREPRESENTATIONHUMANOID_H_

#include "components/ogre/model/ModelRepresentation.h"
#include "components/ogre/OgreIncludes.h"
#include "components/ogre/IAnimated.h"
#include "domain/IGraphicalRepresentation.h"
#include "domain/EmberEntity.h"
#include <OgreMath.h>
#include <OgreVector3.h>
#include <OgreQuaternion.h>
#include <sigc++/trackable.h>
#include <vector>
#include <list>
#include <string>


namespace SmartBody
{
class SBCharacter;
}

namespace Eris
{
class Entity;
}

namespace Ember
{
class EmberEntity;
class SmartBodyManager;

namespace EntityMapping
{
class EntityMapping;
}
namespace OgreView
{
class SoundEntity;
class Scene;

namespace Model
{

class ActionDefinition;
struct SoundDefinition;
class Model;
class Action;
class ModelMount;

typedef std::list<Action*> ActionStore;
typedef std::vector<ActionDefinition*> ActionDefinitionsStore;
typedef std::vector<SoundDefinition*> SoundDefinitionsStore;
typedef std::vector<Ogre::SceneNode*> SceneNodeStore;

/**
 @brief A model representation that is specialized for humanoid character.

 The animations are generated by SmartBody library.

 @author CÃ©line NOEL <celine.noel.7294@gmail.com>

 */
class ModelRepresentationHumanoid: public ModelRepresentation
{
public:

	/**
	 * @brief Ctor.
	 * @param entity The entity instance to bind to.
	 * @param model The model instance used.
	 * @param scene The scene to which the entity belongs.
	 * @param mapping The model mapping tied to the model.
	 */
	ModelRepresentationHumanoid(EmberEntity& entity, Model& model, Scene& scene, EntityMapping::EntityMapping& mapping, SmartBodyManager *sbManager, const std::string& sbSkName);

	/**
	 * @brief Dtor.
	 */
	virtual ~ModelRepresentationHumanoid();

	/**
	 * @brief Initialize position and scaling of the scale node with values from the Model, as well as set up any alternative rendering techniques.
	 */
	void initFromModel();

	/**
	 * @copydoc OgreView::IGraphicalRepresentation::getType()
	 */
	virtual const std::string& getType() const;

	/**
	 * @brief Gets the shared class type name, which is the same one returned through getType().
	 * This can be used to do lookups to see whether any instance of IGraphicalRepresentation if an instance of this class.
	 * @returns The string "ModelRepresentationHumanoid".
	 */
	static const std::string& getTypeNameForClass();

	//	void attachToPointOnModel(const std::string& point, Model* model, Ogre::Quaternion orientation = Ogre::Quaternion::IDENTITY, Ogre::Vector3 offset = Ogre::Vector3::ZERO);
	//	void detachFromModel();

	/**
	 * @brief Updates the animation. This is normally called by MotionManager.
	 * @param timeSlice time to update with.
	 */
	void updateAnimation(float timeSlice);

	/**
	 * @brief The movement mode the entity is in, like walking, running, swimming etc.
	 * @return The current movement mode of the entity.
	 */
	MovementMode getMovementMode() const;

	/**
	 * @brief Sets the velocity, in local units. This means relative to the way the representation is facing, so that x>1 means a forward looking direction.
	 */
	void setLocalVelocity(const WFMath::Vector<3>& velocity);

protected:

	/**
	 * @brief The corresponding SmartBody character.
	 */
	SmartBody::SBCharacter *mCharacter;

	/**
	 * @brief The type name for the class.
	 */
	static std::string sTypeName;

	/**
	 * @brief Called when the movement mode of the entity changes.
	 * For example when the entity changes from standing to walking.
	 * @param newMode The new movement mode.
	 */
	virtual void onMovementModeChanged(MovementMode newMode);

	/**
	 * @brief Parses and sets the movement mode.
	 * The movement mode is determined mainly from whether the entity is moving or not. The speed of the movement also affects the mode.
	 * @param velocity The velocity of the entity.
	 */
	virtual void parseMovementMode(const WFMath::Vector<3>& velocity);

	/**
	 * @brief Resets all current movement, action and task animations.
	 */
	void resetAnimations();
};

}
}
}
#endif /* MODELREPRESENTATION_H_ */
