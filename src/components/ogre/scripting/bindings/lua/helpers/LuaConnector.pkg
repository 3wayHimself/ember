namespace EmberOgre {

class LuaConnector{
	
	/**
	 * @brief Connects to the lua method.
	 *
	 * @param luaMethod The lua method.
	 * @param selfIndex An optional lua table index to be used as a "self" parameter.
	 *
	 * @return This instance.
	 */
	LuaConnector* connect(lua_Object luaMethod, lua_Object selfIndex = LUA_NOREF);
	
	/**
	 * @brief Connects to the named lua method.
	 *
	 * @param luaMethod The fully qualified name of the method.
	 * @param selfIndex An optional lua table index to be used as a "self" parameter.
	 *
	 * @return This instance.
	 */
	LuaConnector* connect(const std::string& luaMethod, lua_Object selfIndex = LUA_NOREF);

		
	/**
	Disconnects from the signal.
	*/
	void disconnect();
	
	/**
	 * @brief Sets a "self" reference which will be prepended to any lua call.
	 *
	 * @param selfIndex The lua index of the self reference.
	 */
	LuaConnector* setSelf(lua_Object selfIndex);
 	
 	LuaConnector(sigc::signal<void>& signal);
    LuaConnector(sigc::signal<void, const std::string&, EmberOgre::EmberEntity*>& signal);
    LuaConnector(sigc::signal<void, Eris::Connection*>& signal);
	LuaConnector(sigc::signal<void, const Eris::ServerInfo&>& signal);
	LuaConnector(sigc::signal<void, float>& signal);
 	LuaConnector(sigc::signal<void, const EmberOgre::EntityPickResult&, const EmberOgre::MousePickerArgs&>& signal);
	LuaConnector(sigc::signal<void, const std::vector<EmberOgre::EntityPickResult>&, const EmberOgre::MousePickerArgs&>& signal);
	LuaConnector(sigc::signal<void, const EmberOgre::MousePickerArgs&>& signal);
	LuaConnector(sigc::signal<void, Ember::Input::MouseButton, Ember::Input::InputMode>& signal);
	LuaConnector(sigc::signal<void, Ember::Input::InputMode>& signal);
	LuaConnector(sigc::signal<void, EmberOgre::EmberEntityFactory&>& signal);
	LuaConnector(sigc::signal<void, EmberOgre::Jesus*>& signal);
	LuaConnector(sigc::signal<void, EmberOgre::EmberEntity*>& signal);
	LuaConnector(sigc::signal<void, EmberOgre::EmberEntity&>& signal);
 	LuaConnector(sigc::signal<void, EmberOgre::EmberEntity&, EmberOgre::Authoring::EntityMover&>& signal);
 	LuaConnector(sigc::signal<void, const std::string&>& signal);
 	LuaConnector(sigc::signal<bool, const std::string&>& signal);
 	LuaConnector(sigc::signal<void, const std::string&, const std::string&>& signal);
 	LuaConnector(sigc::signal<void, EmberOgre::Terrain::BasePointUserObject*>& signal);
 	LuaConnector(sigc::signal<void, EmberOgre::Terrain::TerrainEditAction*>& signal);
	LuaConnector(sigc::signal<void, EmberOgre::Terrain::TerrainEditorOverlay&>& signal);
	LuaConnector(sigc::signal<void, EmberOgre::Terrain::TerrainManager&>& signal);
 	LuaConnector(sigc::signal<void, Eris::Task*>& signal);
 	LuaConnector(sigc::signal<void, const std::set<std::string>&>& signal);
 	LuaConnector(sigc::signal<void, EmberOgre::Gui::EntityIcon*>& signal);
 	LuaConnector(sigc::signal<void, const Atlas::Message::Element&>& signal);
 	LuaConnector(sigc::signal<void, EmberOgre::MovementControllerMode::Mode>& signal);
 	LuaConnector(sigc::signal<void, EmberOgre::Terrain::TerrainPage&>& signal);
	LuaConnector(sigc::signal<void, const Atlas::Objects::Root&>& signal);
	LuaConnector(sigc::signal<void, Eris::Avatar*>& signal);
	LuaConnector(sigc::signal<void, Eris::View*>& signal);
	LuaConnector(sigc::signal<void, EmberOgre::World&>& signal);
};

}
