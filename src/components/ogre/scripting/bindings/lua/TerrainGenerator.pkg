/*
    Copyright (C) 2004  Erik Hjortsberg

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/


namespace EmberOgre {
namespace Terrain {

class TerrainShader;
class TerrainPage;
class TerrainArea;
class TerrainMod;
class TerrainLayerDefinition;
class TerrainPageSurfaceLayer;
class ISceneManagerAdapter;

/**
 * @brief Handles generation and updates of the terrain.
 * This class takes care of generating terrain for Ogre's scenemanager.
 * This involves getting terrain from Mercator, converting this to ogre
 * format and creating materials to make it look good.
 * 
 * It works closely with EmberTerrainPageSource.
 * 
 */
class TerrainGenerator 
{
public:
	 * @brief Gets the max boundaries of the terrain.
	 * @return 
	 */
	const WFMath::Point<2> getMax() const;
	
	/**
	 *    @brief Gets the min boundaries of the terrain.
	 * @return 
	 */
	const WFMath::Point<2> getMin() const;
	
	/**
	 *   @brief Gets the size of one terrain segment.
	 *	(note that this is different from Mercator segments, which always are of size 64)
	 * @return 
	 */
	int getPageMetersSize();
	

	/**
	 * @brief Regenerates all terrain shadow maps.
	 */
	void updateShadows();
	
	/**
	 * @brief Console command for updating all terrain shadow maps.
	 */
	const Ember::ConsoleCommandWrapper UpdateShadows;
	
	
	/**
	/**
	 * @brief Gets the shadow colour at the supplied position.
	 * @param position The position in the world.
	 * @param colour The shadow colour will be put into this value.
	 */
	void getShadowColourAt(const Ogre::Vector2& position, Ogre::ColourValue& colour);

	/**
	 * @brief Emitted when a terrain page has had its geometry updated.
	 *
	 * This often signals that a page is to be loaded and rendered.
	 */
	sigc::signal<void, EmberOgre::Terrain::TerrainPage&> EventTerrainPageGeometryUpdated;
};

}
}


#endif // TERRAINGENERATOR_H
