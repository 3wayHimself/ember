$#include "components/ogre/widgets/Compass.h"
//
// C++ Interface: Compass
//
// Description: 
//
//
// Author: Erik Ogenvik <erik@ogenvik.org>, (C) 2008
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.//
//

namespace Ember {
namespace OgreView {


namespace Gui {

class ICompassImpl;
/**
Helper class for the compass widget.

	@author Erik Ogenvik <erik@ogenvik.org>
*/
class Compass
{
public:
    Compass(Ember::OgreView::Gui::ICompassImpl* compassImpl, Ogre::SceneManager& sceneManager, Terrain::ITerrainAdapter& sceneManagerAdapter);

    virtual ~Compass();
    
    Ember::OgreView::Terrain::Map& getMap();
    
    void reposition(float x, float y);
    void rotate(const Ogre::Degree& degree);
    void rotate(const Ogre::Radian& radian);
    
    /**
     * @brief Refreshes the compass rendering.
     */
    void refresh();

};

/**
@brief A compass implementation which uses a compositor to create the rounded map image.
The main problem with CEGUI is that there's no easy way to apply transparence to a dynamic render texture. By using a compositor we can however render the /ui/compass material, which will use an alpha mask to remove the border from the map texture, providing a rounded shape.
This implementation will only provide the rounded map texture. It's up to other components to then provide further functionality. This can perhaps be done through CEGUI.
@author Erik Ogenvik <erik@ogenvik.org>
*/
class RenderedCompassImpl : ICompassImpl
{
public:

	/**
	 * @brief Ctor.
	 */
	RenderedCompassImpl(CEGUI::Window* pointerElement);

	/**
	 * @brief Dtor.
	 * The render texture which this instance owns will be destroyed along with this instance.
	 */
	virtual ~RenderedCompassImpl();
	
	/**
	* @brief Gets the texture onto which the compass is rendered.
	* @return The texture pointer.
	*/
	Ogre::TexturePtr getTexture() const;

};

class CompassCameraAnchor
{
public:

	CompassCameraAnchor(Ember::OgreView::Gui::Compass& compass, Ogre::Camera* camera);
	
	virtual ~CompassCameraAnchor();

};


class CompassSceneNodeAnchor
{
public:

	CompassSceneNodeAnchor(Ember::OgreView::Gui::Compass& compass, Ogre::SceneNode* sceneNode);
	
	virtual ~CompassSceneNodeAnchor();

};

/**
@brief An anchor implementation which will attach the anchor to both a certain Ogre::Camera instance and a scene node.
The camera will be used for determining the direction of the compass and the scene node will be used to determine the position. This anchor is mainly useful for thir person cameras.
@see CompassAnchor

@author Erik Ogenvik <erik@ogenvik.org>
*/
class CompassThirdPersonCameraAnchor
{
public:

	/**
	 * @brief Ctor.
	 * @param compass The compass to which we want to attach the anchor.
	 * @param camera The Ogre::Camera instance which we want the anchor to follow. When the camera moves the compass will move.
	 */
	CompassThirdPersonCameraAnchor(Ember::OgreView::Gui::Compass& compass, Ogre::Camera* camera, Ogre::SceneNode* node);
	
	/**
	 * @brief Dtor.
	 */
	virtual ~CompassThirdPersonCameraAnchor();

};

}
}
}