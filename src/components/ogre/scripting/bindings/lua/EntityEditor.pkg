//
// C++ Interface: EntityEditor
//
// Description: 
//
//
// Author: Erik Hjortsberg <erik.hjortsberg@gmail.com>, (C) 2007
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.//
//

namespace Ember {
namespace OgreView {

namespace Gui {

/**
	@author Erik Hjortsberg <erik.hjortsberg@gmail.com>
*/
class EntityEditor{
public:
    EntityEditor(Ember::OgreView::World& world, Eris::Entity& entity, Ember::OgreView::Gui::Adapters::Atlas::MapAdapter* rootAdapter);

    virtual ~EntityEditor();
    
    
    void submitChanges();
	
	Atlas::Message::Element createMapElement();
	Atlas::Message::Element createListElement();
	Atlas::Message::Element createStringElement();
	Atlas::Message::Element createIntElement();
	Atlas::Message::Element createFloatElement();
	Atlas::Message::Element createPosition2dElement();

	/**
	 * @brief Adds a new goal.
	 * @param definition The goal definition.
	 */
	void addGoal(const std::string& definition);

	/**
	 * @brief Updates an existing goal.
	 * @param verb The id of the goal (note: not the verb).
	 * @param definition The goal definition.
	 */
	void updateGoal(const std::string& id, const std::string& definition);

	/**
	 * @brief Removes an existing goal.
	 * @param verb The id of the goal (note: not the verb).
	 */
	void removeGoal(const std::string& id);

	/**
	 * @brief Adds new knowledge
	 * @param predicate The predicate of the knowledge.
	 * @param subject The subject of the knowledge.
	 * @param knowledge The knowledge.
	 */
	void addKnowledge(const std::string& predicate, const std::string& subject, const std::string& knowledge);

	void addMarker(const std::string& entityId, const WFMath::Point<3>& point);
	
	void removeMarker();

	static WFMath::Point<3> createPoint(float x, float y, float z);
	
	/**
	 * @brief Queries the entity about its thoughts.
	 *
	 * When thoughts arrive they are emitted through EventGotThought.
	 */
	void getThoughts();
	
	/**
	 * @brief Queries the entity about its goals.
	 *
	 * When thoughts arrive they are emitted through EventGotGoal.
	 */
	void getGoals();

	/**
	 * @brief Gets goal info from the server.
	 *
	 * When goal information has arrived the EventGotGoalInfo event is emitted.
	 * @param id The goal id.
	 */
	void getGoalInfo(const std::string& id);
	
	static std::string parseElementMap(const Atlas::Message::MapType& map);
	
	/**
	 * @brief Emitted when a new thought has arrived.
	 */
	sigc::signal<void, const Atlas::Message::Element&> EventGotThought;
	
	/**
	 * @brief Emitted when a new thought about a goal has arrived.
	 */
	sigc::signal<void, const Atlas::Message::Element&> EventGotGoal;

	/**
	 * @brief Emitted when information about there being no goals have arrived.
	 */
	sigc::signal<void> EventGotEmptyGoals;

	sigc::signal<void, const Atlas::Message::Element&> EventGotGoalInfo;

};

}
}
}