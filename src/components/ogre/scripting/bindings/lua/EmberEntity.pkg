namespace EmberOgre {
class EmberEntity : public Eris::Entity {

	enum MovementMode
	{
		MM_DEFAULT = 0,
		MM_STANDING = 1,
		MM_FLOATING = 2,
		MM_PROJECTILE = 3,
		MM_SWIMMING = 4,
		MM_WALKING = 5,
		MM_RUNNING = 6,
		MM_FIXED = 7  
	};

	Ogre::SceneNode* getSceneNode() const;
	
	bool hasSuggestedResponses() const;
	
	const std::vector< std::string >& getSuggestedResponses() const;
	
	virtual void setVisible(bool visible);
	
	EmberEntity* getEmberLocation() const;
	
	inline bool isInitialized() const;

	inline MovementMode getMovementMode() const;
	
	
	virtual void showOgreBoundingBox(bool show);
	
	virtual void showErisBoundingBox(bool show);

	virtual bool getShowOgreBoundingBox() const;
	
	virtual bool getShowErisBoundingBox() const;

	virtual const Ogre::AxisAlignedBox& getWorldBoundingBox(bool derive = true) const;
	
	/**
	 *    Returns a list of the default use operators that can be used with this entity.
	 For example, an axe would have a list of operators such as "chop" and "sharpen".
	 * @return 
	 */
	std::vector<std::string> getDefaultUseOperators();
	
	/**
	 *    Returns a list of actions that can be performed on this entity, if any.
	 * @return A vector of actions, as strings.
	 */
	std::vector<std::string> getActions();	
	
	/**
	 * General method for turning on and off debug visualizations. Subclasses might support more types of visualizations than the ones defined here.
	 * @param visualization The type of visualization. Currently supports "OgreBBox" and "ErisBBox".
	 * @param visualize Whether to visualize or not.
	 */
	virtual void setVisualize(const std::string& visualization, bool visualize);
	
	
	/**
	 *    Gets whether a certain visualization is turned on or off.
	 * @param visualization The type of visualization. Currently supports "OgreBBox" and "ErisBBox".
	 * @return true if visualization is turned on, else false
	 */
	virtual bool getVisualize(const std::string& visualization) const;
};
}
