//
// C++ Interface: MovableObjectRenderer
//
// Description: 
//
//
// Author: Erik Hjortsberg <erik@katastrof.nu>, (C) 2006
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.//
//

namespace EmberOgre {


/**
Class used for rendering a single Ogre::MovableObject to a EntityCEGUITexture

@author Erik Hjortsberg
*/
class MovableObjectRenderer
{

    
    /**
     * Adapts the position of the camera so that the whole scene is shown.
     */
    void showFull();
    
    /**
     * Sets the distance of the camera from the Model.
     * @param distance 
     */
    void setCameraDistance(float distance);
    
    /**
     * Gets the distance of the camera from the Model in reltive terms with 1.0 being the optimal distance to show the full model.
     * @return 
     */
    float getCameraDistance();
    
    
    /**
     * Returns whether input catching (and also rotation of the model) is allowed.
     * Defaults to true.
     * @return 
     */
    bool getIsInputCatchingAllowed() const;
    
    /**
     * Sets whether input catching (and also rotation of the model) is allowed.
     * @param allowed 
     */
    void setIsInputCatchingAllowed(bool allowed);
    
    /**
     * Gets whether the camera should be repositioned so that the full scene is shown each time the content of the scene node updates
     * Defaults to true.
     * @return 
     */
    void setAutoShowFull(bool showFull);
    
    /**
     * Sets whether the camera should be repositioned so that the full scene is shown each time the content of the scene node updates
     * @return 
     */
    bool getAutoShowFull() const;

    bool getActive() const;
    void setActive(bool isActive);
    
	/**
	 *    Gets the rotation of the entity.
	 * @return 
	 */
	Ogre::Quaternion getEntityRotation();
	
	
	/**
	 *    Resets the orientation of the camera.
	 */
	void resetCameraOrientation();

	/**
	 *    Pitches the camera.
	 * @param degrees The amount of degrees to pitch.
	 */
	void pitch(Ogre::Degree degrees);
	
	/**
	 *    Yaws the camera.
	 * @param degrees The amount of degree to yaw.
	 */
	void yaw(Ogre::Degree degrees);
    
	/**
	 *    Rolls the camera.
	 * @param degrees The amount of degree to roll.
	 */
    void roll(Ogre::Degree degrees);
    
    /**
     * Updates the texture by rendering one frame manually.
     */
    void updateRender();    
};

}


