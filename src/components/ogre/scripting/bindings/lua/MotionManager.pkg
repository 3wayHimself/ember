namespace EmberOgre {

class IAnimated
{
public:
	void updateAnimation(float timeSlice);
};


class MotionManager  {
	//from Singleton
	struct MotionManagerInfo
	{
		int AnimatedEntities;
		int MovingEntities;
	};
		
	static MotionManager& getSingleton( void );
	
	void addEntity(EmberEntity* entity);
	void removeEntity(EmberEntity* entity);
	
	/**
	 * Adds a EmberPhysicalEntity to the movement list.
	 * That means that until removeAnimatedEntity is called for the specific entity
	 * new positions (and animations) for the entity will be calculated for each frame.
	 */
	void addAnimatedEntity(const std::string& id, IAnimated* entity);
	/**
	 * Removes a EmberPhysicalEntity from the movement list.
	 * New positions (and animations) for the entity will NOT be calculated for each frame.
	 */
	void removeAnimatedEntity(const std::string& id);
	
	/**
	 *    Gets info about the MotionManager.
	 * @return 
	 */
	inline const EmberOgre::MotionManager::MotionManagerInfo& getInfo() const;
	
};
}
