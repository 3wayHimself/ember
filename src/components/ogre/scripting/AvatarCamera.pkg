
class AvatarCamera
{
public:

	enum Mode {
		MODE_THIRD_PERSON = 1,
		MODE_FIRST_PERSON = 2
	};
	
	/**
	Command for setting the distance between the camera and the avatar.
	*/
	static const std::string SETCAMERADISTANCE;
	
	/**
	 * Pitches the camera the supplied degrees
	 */
	virtual void pitch(Ogre::Degree degrees);
	
	/**
	 * Yaws the camera the supplied degrees
	 */
	virtual void yaw(Ogre::Degree degrees);
	
	/**
	 * returns the current degrees of pitch from the cameras initial position
	 */
	Ogre::Degree getPitch() const;
	
	/**
	 * returns the current degrees of yaw from the cameras initial position
	 */
	Ogre::Degree getYaw() const;
	
	/**
	 * returns a pointer to the Ogre::Camera instance 
	 */
	virtual Ogre::Camera* getCamera();
	virtual Ogre::Camera* getCamera() const;
	
	/**
	 * Returns the current camera orientation in the world
	 */
	virtual Ogre::Quaternion getOrientation(bool onlyHorizontal = true) const;
	
	
	/**
	 *    Returns the position of the camera in the world.
	 * @return 
	 */
	Ogre::Vector3 getPosition() const;
	
	
	void setMode(Mode mode);
	
	
	/**
	* emitted when the camra moves
	*/
	sigc::signal<void, Ogre::Camera*> MovedCamera;
	
	/**
	* emitted when the distance between the camera and the avatar has changed
    * @param Ogre::Real the new distance
	*/
	sigc::signal<void, Ogre::Real> EventChangedCameraDistance;
	
	void setClosestPickingDistance(Ogre::Real distance);
	Ogre::Real getClosestPickingDistance();

	void attach(Ogre::SceneNode* toNode);
	
	
	/**
	 *    Sets the distance from the camera to the avatar.
	 * @param distance the new distance
	 */
	void setCameraDistance(Ogre::Real distance);
	
};

