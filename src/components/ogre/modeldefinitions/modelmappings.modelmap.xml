<modelmappings>
	
<!--
	templates:
	
	<modelmapping name="">
		<entitymatch>
			<case equals="">
				<action type="display-model">" />
			</case>
		</entitymatch>
	</modelmapping>
	
	<automodelmapping name="" />
	
	<automodelmapping name="" modelname="" />
	
	<nomodel name="" />

-->	
	

	
<!-- environment -->	
<!-- A simple case. We want the model "turnip" to be shown for the entity of type "turnip" -->
	<modelmapping name="turnip">
		<entitymatch>
			<case>
				<caseparam type="equals">turnip</caseparam>
				<action type="display-model">turnip</action>
			</case>
		</entitymatch>
	</modelmapping>
	
<!-- For convenience we also provide the "automodelmapping" element, which maps a single model to an entity type of the same name. The result of this will be the same structure as the turnip. -->
	<automodelmapping name="acorn" />
	
<!-- The automodelmapping element also has an optional "modelname" attribute, which allows you to select a different model to map to the entity type. -->
	<automodelmapping name="carrot" />
	
	<modelmapping name="fern">
		<entitymatch>
			<case>
				<caseparam type="equals">fern</caseparam>
				<action type="display-model">fern</action>
			</case>
		</entitymatch>
	</modelmapping>	
	
	
	<modelmapping name="boulder">
		<entitymatch>
			<case>
				<caseparam type="equals">boulder</caseparam>
				<action type="display-model">graniteA</action>
				<attributematch attribute="style" >
					<case>
						<caseparam type="equals">a</caseparam>
						<action type="display-model">graniteA</action>
					</case>
					<case>
						<caseparam type="equals">b</caseparam>
						<action type="display-model">graniteB</action>
					</case>
					<case>
						<caseparam type="equals">c</caseparam>
						<action type="display-model">graniteC</action>
					</case>
					<case>
						<caseparam type="equals">d</caseparam>
						<action type="display-model">graniteD</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	
	<!-- We want the model "boulder" to be used for the entity "boulder". However, there are four different boulder meshes, which the model defines as four different parts. Depending on attribute "style" a different part will be shown. We assume that "style" is one of "a", "b", "c" or "d". Since the parts in the model are defined to belong to the same group (not shown in this file), only one part will be shown at the same time. -->
<!--	<modelmapping name="boulder">
		<entitymatch>
			<case>
				<caseparam type="equals">boulder</caseparam>
				<action type="display-model">boulder</action>
				<attributematch attribute="style" >
					<case>
						<caseparam type="equals">a</caseparam>
						<action type="display-part">boulders_A</action>
					</case>
					<case>
						<caseparam type="equals">b</caseparam>
						<action type="display-part">boulders_B</action>
					</case>
					<case>
						<caseparam type="equals">c</caseparam>
						<action type="display-part">boulders_C</action>
					</case>
					<case>
						<caseparam type="equals">d</caseparam>
						<action type="display-part">boulders_D</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>-->
	
	<!-- An alternative to the previous boulder mapping is to instead have each boulder mesh in its own model file. The mapping would then be like this. -->
	<!--	<modelmapping name="boulder">
		<entitymatch>
			<case equals="boulder">
				<attributematch attribute="style" >
					<case equals="a">
						<action type="display-model">boulderA" />
					</case>
					<case equals="b">
						<action type="display-model">boulderB" />
					</case>
					<case equals="c">
						<action type="display-model">boulderkC" />
					</case>
					<case equals="d">
						<action type="display-model">boulderD" />
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>
	-->
	
	<automodelmapping name="fire" />
	<automodelmapping name="lumber" />
	
	<modelmapping name="mushroom">
		<entitymatch>
			<case>
				<caseparam type="equals">mushroom</caseparam>
				<action type="display-model">mushroom_A</action>
				<attributematch attribute="style">
					<case>
						<caseparam type="equals">stocky</caseparam>
						<action type="display-model">mushroom_A</action>
					</case>
					<case>
						<caseparam type="equals">pointy</caseparam>
						<action type="display-model">mushroom_B</action>
					</case>
				</attributematch>
				<!-- The parts are identical for both types of meshes. -->
				<attributematch attribute="species">
					<case>
						<caseparam type="equals">amanita</caseparam>
						<action type="display-part">amanita</action>
					</case>
					<case>
						<caseparam type="equals">galerina</caseparam>
						<action type="display-part">galerina</action>
					</case>
					<case>
						<caseparam type="equals">blue_moon</caseparam>
						<action type="display-part">blue_moon</action>
					</case>
					<case>
						<caseparam type="equals">silkfoot</caseparam>
						<action type="display-part">silkfoot</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	
	
	
	<automodelmapping name="apple" />
	<automodelmapping name="pile" />
	<automodelmapping name="grass" />
	
<!-- furniture-->
	<automodelmapping name="chair" />
	<automodelmapping name="door" />
	<automodelmapping name="longtable" />
	<automodelmapping name="shelf_table" />
	<automodelmapping name="simple_shelf" />
	<automodelmapping name="stool" />
	<automodelmapping name="bed" />
	<automodelmapping name="table" modelname="simple_table" />
	
<!-- items -->
	<automodelmapping name="barrel" />
	<automodelmapping name="coin" />
	<automodelmapping name="torch" />
	<automodelmapping name="deed" />
	<automodelmapping name="bottle" />
	<modelmapping name="bowls">
		<entitymatch>
			<case>
				<caseparam type="equals">bowl</caseparam>
				<action type="display-model">bowls</action>
				<attributematch attribute="style">
					<case>
						<caseparam type="equals">flat</caseparam>
						<action type="display-part">flat</action>
					</case>
					<case>
						<caseparam type="equals">medium</caseparam>
						<action type="display-part">medium</action>
					</case>
					<case>
						<caseparam type="equals">high</caseparam>
						<action type="display-part">high</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>		
	
	<!-- This will only work if the trousers and shirt has the same parts defined -->
	<modelmapping name="clothes">
		<entitymatch>
			<case>
				<caseparam type="equals">shirt</caseparam>
				<caseparam type="equals">trousers</caseparam>
				<entitymatch>
					<case>
						<caseparam type="equals">shirt</caseparam>
						<action type="display-model">shirt</action>
					</case>
					<case>
						<caseparam type="equals">trousers</caseparam>
						<action type="display-model">trousers</action>
					</case>
				</entitymatch>
				<attributematch attribute="style">
					<case>
						<caseparam type="equals">burlap</caseparam>
						<action type="display-part">clothes/burlap</action>
						<attributematch attribute="colour">
							<case>
								<caseparam type="equals">grey</caseparam>
								<attributematch attribute="trimcolour">
									<case>
										<caseparam type="equals">blue</caseparam>
										<action type="display-part">clothes/burlap/grey_blue_trims</action>
									</case>
									<case>
										<caseparam type="equals">red</caseparam>
										<action type="display-part">clothes/burlap/grey_red_trims</action>
									</case>
									<case>
										<caseparam type="equals">yellow</caseparam>
										<action type="display-part">clothes/burlap/grey_yellow_trims</action>
									</case>
									<case>
										<caseparam type="equals">green</caseparam>
										<action type="display-part">clothes/burlap/grey_green_trims</action>
									</case>
								</attributematch>
							</case>
							<case>
								<caseparam type="equals">red</caseparam>
								<action type="display-part">clothes/burlap/red</action>
							</case>
							<case>
								<caseparam type="equals">yellow</caseparam>
								<action type="display-part">clothes/burlap/yellow</action>
							</case>
							<case>
								<caseparam type="equals">green</caseparam>
								<action type="display-part">clothes/burlap/green</action>
							</case>
						</attributematch>
					</case>
					<case>
						<caseparam type="equals">ragged</caseparam>
						<action type="display-part">clothes/ragged</action>
					</case>
					<case>
						<caseparam type="equals">dark_rags</caseparam>
						<action type="display-part">clothes/dark_rags</action>
					</case>
					<case>
						<caseparam type="equals">sun</caseparam>
						<action type="display-part">clothes/sun</action>
					</case>
					<case>
						<caseparam type="equals">fine</caseparam>
						<action type="display-part">clothes/fine</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>
	
	<!-- Use the shirt model as a placeholder -->
	<modelmapping name="cloak">
		<entitymatch>
			<case>
				<caseparam type="equals">cloak</caseparam>
				<action type="display-model">shirt</action>
			</case>
		</entitymatch>
	</modelmapping>

	<automodelmapping name="boots" />
	<automodelmapping name="wood" />

<!-- outdoor structures -->
	<automodelmapping name="palisade" />
	<automodelmapping name="palisade_earth" />
	<modelmapping name="stone_palisade">
		<entitymatch>
			<case>
				<caseparam type="equals">stone_palisade</caseparam>
				<action type="display-model">stone_palisade</action>
				<attributematch attribute="style" >
					<case>
						<caseparam type="equals">broken</caseparam>
						<action type="display-part">broken</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	
	
	
	<automodelmapping name="stake" />
	<automodelmapping name="sty" />
	<modelmapping name="stall">
		<entitymatch>
			<case>
				<caseparam type="equals">stall</caseparam>
				<action type="display-model">marketstall_canvasA</action>
				<attributematch attribute="style" >
					<case>
						<caseparam type="equals">B</caseparam>
						<action type="display-model">marketstall_canvasB</action>
					</case>
					<case>
						<caseparam type="equals">C</caseparam>
						<action type="display-model">marketstall_canvasC</action>
					</case>
				</attributematch>
				<attributematch attribute="fabric" >
					<case>
						<caseparam type="equals">blue_green</caseparam>
						<action type="display-part">canvas_blue_green</action>
					</case>
					<case>
						<caseparam type="equals">plain</caseparam>
						<action type="display-part">canvas</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	
	<automodelmapping name="jetty" />
	<modelmapping name="campfire">
		<entitymatch>
			<case>
				<caseparam type="equals">campfire</caseparam>
				<action type="display-model">campfireB</action>
			</case>
		</entitymatch>
	</modelmapping>	
	<automodelmapping name="choppingblock" />
	<modelmapping name="gravestone">
		<entitymatch>
			<case>
				<caseparam type="equals">gravestone</caseparam>
				<action type="display-model">tombstone</action>
				<action type="display-part">a</action>
				<attributematch attribute="style" >
					<case>
						<caseparam type="equals">simple</caseparam>
						<action type="display-part">a</action>
					</case>
					<case>
						<caseparam type="equals">rounded</caseparam>
						<action type="display-part">b</action>
					</case>
					<case>
						<caseparam type="equals">stylish</caseparam>
						<action type="display-part">c</action>
					</case>
					<case>
						<caseparam type="equals">cross</caseparam>
						<action type="display-part">tombstone_cross_a</action>
					</case>
					<case>
						<caseparam type="equals">cross broken</caseparam>
						<action type="display-part">tombstone_cross_b</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	


	
<!-- buildings -->
	<automodelmapping name="castlefoundation" />
	<automodelmapping name="castle_outer_wall" />
	<automodelmapping name="armory" />
	<modelmapping name="bailey">
		<entitymatch>
			<case>
				<caseparam type="equals">bailey1</caseparam>
				<action type="display-model">bailey1</action>
			</case>
			<case>
				<caseparam type="equals">bailey2</caseparam>
				<action type="display-model">bailey2</action>
			</case>
		</entitymatch>
	</modelmapping>	
	<automodelmapping name="curtain_wall" />
	<automodelmapping name="don_jon" />
	<automodelmapping name="gateway" />
	<automodelmapping name="keep" />
	<modelmapping name="castle_house">
		<entitymatch>
			<case>
				<caseparam type="equals">castle_house</caseparam>
				<action type="display-model">cg_house</action>
				<attributematch attribute="roof" >
					<case>
						<caseparam type="equals">shingle</caseparam>
						<action type="display-part">roof_shingle</action>
					</case>
					<case>
						<caseparam type="equals">straw</caseparam>
						<action type="display-part">roof_straw</action>
					</case>
					<case>
						<caseparam type="equals">shale</caseparam>
						<action type="display-part">roof_shale</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	
	<automodelmapping name="castle_wall_run" modelname="cg_wall_run" />
	<automodelmapping name="castle_wall_gate" modelname="cg_wall_gate" />
	<automodelmapping name="castle_wall_stairs" modelname="cg_wall_stairs" />
	<automodelmapping name="castle_wall_corner" modelname="cg_wall_corner" />
	
	
	
	<automodelmapping name="inn" modelname="cg_inn" />
	<automodelmapping name="outerwall" />
	<modelmapping name="mausoleum">
		<entitymatch>
			<case>
				<caseparam type="equals">mausoleum</caseparam>
				<action type="display-model">temple</action>
			</case>
		</entitymatch>
	</modelmapping> 
	<automodelmapping name="tower" />
	<automodelmapping name="gallows" />

	<automodelmapping name="butcher_house" />
	<automodelmapping name="house3" />
	
<!-- tools -->	
	<automodelmapping name="trowel" />
	<modelmapping name="axe">
		<entitymatch>
			<case>
				<caseparam type="equals">axe</caseparam>
				<action type="display-model">hatchet</action>
			</case>
		</entitymatch>
	</modelmapping> 
	<!-- automodelmapping name="axe" / -->
	<automodelmapping name="hammer" />
	<automodelmapping name="scythe" />
	<automodelmapping name="bucksaw" />
	<modelmapping name="tinderbox">
		<entitymatch>
			<case>
				<caseparam type="equals">tinderbox</caseparam>
				<action type="display-model">tinderboxA</action>
			</case>
		</entitymatch>
	</modelmapping> 
	<automodelmapping name="pickaxe" />
	<modelmapping name="pole">
		<entitymatch>
			<case>
				<caseparam type="equals">pole</caseparam>
				<action type="display-model">lumber</action>
			</case>
		</entitymatch>
	</modelmapping> 
	<modelmapping name="spade">
		<entitymatch>
			<case>
				<caseparam type="equals">shovel</caseparam>
				<action type="display-model">spade</action>
			</case>
		</entitymatch>
	</modelmapping> 
	<modelmapping name="sword">
		<entitymatch>
			<case>
				<caseparam type="equals">sword</caseparam>
				<action type="display-model">sword</action>
			</case>
		</entitymatch>
	</modelmapping> 
	<modelmapping name="arrow">
		<entitymatch>
			<case>
				<caseparam type="equals">arrow</caseparam>
				<action type="display-model">arrow</action>
			</case>
		</entitymatch>
	</modelmapping> 	
	
<!-- vehicles -->	
	<automodelmapping name="boat" />

	<modelmapping name="cart">
		<entitymatch>
			<case>
				<caseparam type="equals">cart</caseparam>
				<action type="display-model">cart</action>
				<attributematch attribute="style" >
					<case>
						<caseparam type="equals">1</caseparam>
						<action type="display-part">1</action>
					</case>
					<case>
						<caseparam type="equals">2</caseparam>
						<action type="display-part">2</action>
					</case>
					<case>
						<caseparam type="equals">3</caseparam>
						<action type="display-part">3</action>
					</case>
					<case>
						<caseparam type="equals">4</caseparam>
						<action type="display-part">4</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	
	
<!-- trees -->	
	
	<modelmapping name="fir">
		<entitymatch>
			<case>
				<caseparam type="equals">fir</caseparam>
				<action type="display-model">pineA</action>
				<attributematch attribute="style" >
					<case>
						<caseparam type="equals">gnarly</caseparam>
						<action type="display-model">pineA</action>
					</case>
					<case>
						<caseparam type="equals">knotted</caseparam>
						<action type="display-model">pineB</action>
					</case>
					<case>
						<caseparam type="equals">weathered</caseparam>
						<action type="display-model">pineC</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>
	
	<automodelmapping name="bush" />
	
	
	<!-- We'll use jayrs new oak for now -->
	<modelmapping name="oak">
		<entitymatch>
			<case>
				<caseparam type="equals">oak</caseparam>
				<action type="display-model">oak_mk1</action>
			</case>
		</entitymatch>
	</modelmapping> 	
	
	<modelmapping name="birch">
		<entitymatch>
			<case>
				<caseparam type="equals">birch</caseparam>
				<action type="display-model">birchA</action>
				<attributematch attribute="style" >
					<case>
						<caseparam type="equals">gnarly</caseparam>
						<action type="display-model">birchA</action>
					</case>
					<case>
						<caseparam type="equals">weathered</caseparam>
						<action type="display-model">birchB</action>
					</case>
					<case>
						<caseparam type="equals">straight</caseparam>
						<action type="display-model">birchC</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping> 	
	
	
	<!-- We have three different types of oaks: large, young and saplings. The size (which we for simplicity assumes is a float) determines which of these we should show. Furthermore, the "style" attribute which variant of oak we should show (just as with the boulder).
		 -->
<!--	<modelmapping name="oak">
		<entitymatch>
			<case equals="oak">
				<action type="display-model">oak</action>
				<attributematch type="function" attribute="height">
					<case lesser="3">
						<action type="display-model">oak_sapling</action>
						<attributematch attribute="style" >
							<case equals="gnarly">
								<action type="display-part">A</action>
							</case>
							<case equals="knotted">
								<action type="display-part">B</action>
							</case>
							<case equals="weathered">
								<action type="display-part">C</action>
							</case>
						</attributematch>
					</case>
					<case greaterequals="3" lesserequals="6">
						<action type="display-model">oak_young</action>
						<attributematch attribute="style" >
							<case equals="gnarly">
								<action type="display-part">A</action>
							</case>
							<case equals="knotted">
								<action type="display-part">B</action>
							</case>
							<case equals="weathered">
								<action type="display-part">C</action>
							</case>
						</attributematch>
					</case>
					<case greater="6">
						<action type="display-model">oak</action>
						<attributematch attribute="style" >
							<case equals="gnarly">
								<action type="display-part">A</action>
							</case>
							<case equals="knotted">
								<action type="display-part">B</action>
							</case>
							<case equals="weathered">
								<action type="display-part">C</action>
							</case>
						</attributematch>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>-->
	
<!-- 	<automodelmapping name="birch" /> -->

	
	<!-- We'll use the "male" model for the entities of type "settler" or "butcher". Depending on what kind of entity is outfitted to the torso we'll show a shirt part. The shirts all belongs to the same group in the model, so only one will be shown at the same time.
		-->
	
	<modelmapping name="human">
		<entitymatch>
			<case>
				<caseparam type="equals">settler</caseparam>
				<caseparam type="equals">merchant</caseparam>
				<caseparam type="equals">mercenary</caseparam>
				<caseparam type="equals">marshall</caseparam>
				<action type="display-model">male</action>
			</case>
		</entitymatch>
	</modelmapping>
	
	
<!--	<modelmapping name="human">
		<entitymatch>
			<case>
				<caseparam type="equals">settler</caseparam>
				<caseparam type="equals">merchant</caseparam>
				<caseparam type="equals">mercenary</caseparam>
				<caseparam type="equals">marshall</caseparam>
				<action type="display-model">male</action>
				<outfitmatch attachment="body">
					<case>
						<caseparam type="equals">shirt</caseparam>
						<action type="display-part">clothes/burlap</action>
						<attributematch attribute="style">
							<case>
								<caseparam type="equals">burlap</caseparam>
								<action type="display-part">clothes/burlap</action>
								<attributematch attribute="colour">
									<case>
										<caseparam type="equals">grey</caseparam>
										<attributematch attribute="trimcolour">
											<case>
												<caseparam type="equals">blue</caseparam>
												<action type="display-part">clothes/burlap/grey_blue_trims</action>
											</case>
											<case>
												<caseparam type="equals">red</caseparam>
												<action type="display-part">clothes/burlap/grey_red_trims</action>
											</case>
											<case>
												<caseparam type="equals">yellow</caseparam>
												<action type="display-part">clothes/burlap/grey_yellow_trims</action>
											</case>
											<case>
												<caseparam type="equals">green</caseparam>
												<action type="display-part">clothes/burlap/grey_green_trims</action>
											</case>
										</attributematch>
									</case>
									<case>
										<caseparam type="equals">red</caseparam>
										<action type="display-part">clothes/burlap/red</action>
									</case>
									<case>
										<caseparam type="equals">yellow</caseparam>
										<action type="display-part">clothes/burlap/yellow</action>
									</case>
									<case>
										<caseparam type="equals">green</caseparam>
										<action type="display-part">clothes/burlap/green</action>
									</case>
								</attributematch>
							</case>
							<case>
								<caseparam type="equals">ragged</caseparam>
								<action type="display-part">clothes/ragged</action>
							</case>
							<case>
								<caseparam type="equals">dark_rags</caseparam>
								<action type="display-part">clothes/dark_rags</action>
							</case>
							<case>
								<caseparam type="equals">sun</caseparam>
								<action type="display-part">clothes/sun</action>
							</case>
							<case>
								<caseparam type="equals">fine</caseparam>
								<action type="display-part">clothes/fine</action>
							</case>
						</attributematch>
					</case>
				</outfitmatch>
			</case>
		</entitymatch>
	</modelmapping> -->
	<automodelmapping name="creator" />

	<automodelmapping name="fish" />
	<automodelmapping name="dog" />
	<!-- use the spider mesh for the crab for now -->
	<modelmapping name="spider">
		<entitymatch>
			<case>
				<caseparam type="equals">crab</caseparam>
				<caseparam type="equals">spider</caseparam>
				<action type="display-model">spider</action>
				<attributematch attribute="colour">
					<case>
						<caseparam type="equals">carrion</caseparam>
						<action type="display-part">body/carrion</action>
					</case>
					<case>
						<caseparam type="equals">emerald</caseparam>
						<action type="display-part">body/emerald</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	

	
	
	<automodelmapping name="deer" />
	<automodelmapping name="squirrel" />
	<modelmapping name="chicken">
		<entitymatch>
			<case>
				<caseparam type="equals">chicken</caseparam>
				<action type="display-model">chicken</action>
				<attributematch attribute="plumage">
					<case>
						<caseparam type="equals">red</caseparam>
						<action type="display-part">redchicken</action>
					</case>
					<case>
						<caseparam type="equals">grey</caseparam>
						<action type="display-part">greychicken</action>
					</case>
					<case>
						<caseparam type="equals">buzzard</caseparam>
						<action type="display-part">buzzard</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>		
	<automodelmapping name="pig" />
	<automodelmapping name="cow" />
	<automodelmapping name="rabbit" />
	<automodelmapping name="wolf" />
	<modelmapping name="skeleton">
		<entitymatch>
			<case>
				<caseparam type="equals">skeleton</caseparam>
				<caseparam type="equals">lych</caseparam>
				<action type="display-model">skeleton</action>
<!--				<entitymatch>
					<case equals="lych">
						<caseparam type="equals">lych</caseparam>
						<action type="display-part">Cape</action>
					</case>
				</entitymatch>-->
			</case>
		</entitymatch>
	</modelmapping>	
	<automodelmapping name="arm" />
	<automodelmapping name="skull" />
	<automodelmapping name="shin" />
	<automodelmapping name="pelvis" />
	<automodelmapping name="ribcage" />
	<automodelmapping name="thigh" />
<!--	<modelmapping name="goblin">
		<entitymatch>
			<case>
				<caseparam type="equals">goblin</caseparam>
				<action type="display-model">goblin</action>
			</case>
		</entitymatch>
	</modelmapping>	-->
	<modelmapping name="kobold">
		<entitymatch>
			<case>
				<caseparam type="equals">goblin</caseparam>
				<action type="display-model">kobold</action>
				<attributematch attribute="skincolour">
					<case>
						<caseparam type="equals">brown</caseparam>
						<action type="display-part">body/brown</action>
					</case>
					<case>
						<caseparam type="equals">green</caseparam>
						<action type="display-part">body/brown</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>		
	
	<automodelmapping name="horse" />
	
<!-- edibled -->
	<automodelmapping name="ham" />
	<automodelmapping name="breadslice" />
	<automodelmapping name="bread_cut" />
	<modelmapping name="bread">
		<entitymatch>
			<case>
				<caseparam type="equals">bread</caseparam>
				<caseparam type="equals">loaf</caseparam>
				<action type="display-model">bread</action>
				<!-- If someone has eaten off the bread show the cut version -->
				<attributematch attribute="status" >
					<case>
						<caseparam type="lesser">0.8</caseparam>
						<action type="display-model">bread_cut</action>
					</case>
				</attributematch>
			</case>
		</entitymatch>
	</modelmapping>	

	
	
	<automodelmapping name="crate" />
	<automodelmapping name="open_crate" />
	
	
	<automodelmapping name="fence_pole" />
	<automodelmapping name="fence_section" modelname="wooden_fence" />
	<automodelmapping name="fence_gate" modelname="wooden_gate" />
	
	<modelmapping name="theodolite">
		<entitymatch>
			<case>
				<caseparam type="equals">theodolite</caseparam>
				<action type="display-model">placeholder</action>
			</case>
		</entitymatch>
	</modelmapping>
	
	<!--
		Show a placeholder for all instances of game_entity, except for those that we want to exclude by adding a nomodel element for.
		-->
	<automodelmapping name="game_entity" modelname="placeholder" />
	<nomodel name="boundary" />
	<nomodel name="path" />
	<nomodel name="ploughed_field" />
	<nomodel name="weather" />
	<nomodel name="wall" /> <!-- This is the invisble wall for the houses -->

</modelmappings>
