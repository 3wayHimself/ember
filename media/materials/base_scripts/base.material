//this file contains base material from which other materials can inherit


//A simple material containing a simple diffuse map
material /base/simple
{
  technique General
  {
    pass Main
    {
	  texture_unit DiffuseMap
      {
        texture_alias DiffuseMap
      }
    }
  }
} 

//Just like the /base/simple material, but without culling.
material /base/simple/nonculled : /base/simple
{
  technique General
  {
    pass Main
    {
     cull_hardware none 
     cull_software none
    }
  }
} 

//Just like the /base/simple material, but without culling and with alpha blending and alpha rejection.
//Useful for clothes and leaves.
material /base/simple/nonculled/alphablended : /base/simple/nonculled
{
  technique General
  {
    pass Main
    {
     scene_blend alpha_blend 
    }
  }
} 

//Just like the /base/simple material, but without culling and with alpha rejection
//Useful for clothes and leaves.
material /base/simple/nonculled/alpharejected : /base/simple/nonculled
{
  technique General
  {
    pass Main
    {
     alpha_rejection greater_equal 64
    }
  }
} 


material /base/normalmap
{
	//use the normal mapped techniques for things that are closer than 30 meters, then use a basic one
	lod_distances 30

	// This is the preferred technique which uses both vertex and 
	// fragment programs, supports coloured lights 
	technique NormalMapped
	{ 
		lod_index 0
		// do the lighting  and bump mapping with parallax pass 
		pass Main
		{ 
		
			// Vertex program reference 
			vertex_program_ref Examples/OffsetMappingVP 
			{ 
			} 
	
			// Fragment program 
			fragment_program_ref Examples/OffsetMappingFP
			{ 
				//force the specular to 0 to disable it
				param_named lightSpecular float3 0 0 0
				// Parallax Height scale and bias 
//  				param_named scaleBias float4 0.0004 -0.002 1 0 
// 				param_named scaleBias float4 0.0 0.0 0.0 0.0
// 				param_named scaleBias float4 0.04 -0.02 1 0 
// 				param_named specularBias float 0
			} 
			
			// Normal + height(alpha) map 
			texture_unit NormalHeightMap
			{ 
				tex_coord_set 0 
			} 
	
			// Base diffuse texture map 
			texture_unit DiffuseMap
			{ 
				tex_coord_set 1 
			} 
		} 
	} 

	// This is the preferred technique which uses both vertex and 
	// fragment programs, supports coloured lights 
	technique NormalMappedOld
	{ 
		lod_index 0
		// do the lighting  and bump mapping with parallax pass 
		pass Main
		{ 
		
			// Vertex program reference 
			vertex_program_ref Examples/OffsetMappingVP 
			{ 
				param_named_auto lightPosition light_position_object_space 0 
				param_named_auto eyePosition camera_position_object_space 
				param_named_auto worldViewProj worldviewproj_matrix 
			} 
	
			// Fragment program 
			fragment_program_ref Examples/OffsetMappingPS 
			{ 
				param_indexed_auto 0 light_diffuse_colour 0 
				param_indexed 1 float3 0 0 0 
				//param_indexed_auto 2 ambient_light_colour 0 
				// Parallax Height scale and bias/base/normalmap_example 
 				param_indexed 2 float4 0.0004 -0.002 1 0 
// 				param_indexed 2 float4 0.0 0.0 0.0 0.0
// 				param_indexed 2 float4 0.04 -0.02 1 0 
				//param_indexed 4 float 0
			} 
			
			// Normal + height(alpha) map 
			texture_unit NormalHeightMap
			{ 
				tex_coord_set 0 
			} 
	
			// Base diffuse texture map 
			texture_unit DiffuseMap
			{ 
				tex_coord_set 1 
			} 
		} 
	} 
	
	// Simple no-shader fallback
	technique General
	{ 
		lod_index 0
		pass Main
		{ 
				// Base diffuse texture map 
				texture_unit DiffuseMap
				{ 
					texture_alias DiffuseMap
				} 
		}
	}

	// Use a simple technique in the distance
	technique GeneralDistance
	{ 
		lod_index 1
		pass Main
		{ 
				// Base diffuse texture map 
				texture_unit DiffuseMap
				{ 
					texture_alias DiffuseMap
				} 
		}
	}
}

material /base/normalmap/specular
{ 
	//use the normal mapped techniques for things that are closer than 30 meters, then use a basic one
	lod_distances 30
	
	// This is the preferred technique which uses both vertex and 
	// fragment programs, supports coloured lights 
	technique NormalMapped
	{ 
		lod_index 0
		// do the lighting  and bump mapping with parallax pass 
		pass Main
		{ 
		
			// Vertex program reference 
			vertex_program_ref Examples/OffsetMappingVP 
			{ 
			} 
	
			// Fragment program 
			fragment_program_ref Examples/OffsetMappingFP
			{ 
				param_named_auto lightSpecular light_specular_colour 0 
				// Parallax Height scale and bias 
//  				param_named scaleBias float4 0.0004 -0.002 1 0 
// 				param_named scaleBias float4 0.0 0.0 0.0 0.0
// 				param_named scaleBias float4 0.04 -0.02 1 0 
// 				param_named specularBias float 1
				
				
			} 
			
			// Normal + height(alpha) map 
			texture_unit NormalHeightMap
			{ 
				tex_coord_set 0 
			} 
	
			// Base diffuse texture map 
			texture_unit DiffuseMap
			{ 
				tex_coord_set 1 
			} 
		} 
	} 

	// This is the preferred technique which uses both vertex and 
	// fragment programs, supports coloured lights 
//	technique NormalMappedOld
//	{ 
//		// do the lighting  and bump mapping with parallax pass 
//		pass Main
//		{ 
//		
//			// Vertex program reference 
//			vertex_program_ref Examples/OffsetMappingVP 
//			{ 
//				param_named_auto lightPosition light_position_object_space 0 
//				param_named_auto eyePosition camera_position_object_space 
//				param_named_auto worldViewProj worldviewproj_matrix 
//			} 
//	
//			// Fragment program 
//			fragment_program_ref Examples/OffsetMappingPS 
//			{ 
//				param_indexed_auto 0 light_diffuse_colour 0 
//				param_indexed_auto 1 light_specular_colour 0 
////				param_indexed_auto 2 ambient_light_colour 0 
//				// Parallax Height scale and bias/base/normalmap_example 
//				param_indexed 2 float4 0.04 -0.02 1 0 
////				param_indexed 4 float 1
//			} 
//			
//			// Normal + height(alpha) map 
//			texture_unit NormalHeightMap
//			{ 
//				tex_coord_set 0 
//			} 
//	
//			// Base diffuse texture map 
//			texture_unit DiffuseMap
//			{ 
//				tex_coord_set 1 
//			} 
//		} 
//	} 
	
	// Simple no-shader fallback
	technique General
	{ 
		lod_index 0
		pass Main
		{ 
				// Base diffuse texture map 
				texture_unit DiffuseMap
				{ 
					texture_alias DiffuseMap
				} 
		}
	}
	
	// Use a simple technique in the distance
	technique GeneralDistance
	{ 
		lod_index 1
		pass Main
		{ 
				// Base diffuse texture map 
				texture_unit DiffuseMap
				{ 
					texture_alias DiffuseMap
				} 
		}
	}
}

material /base/normalmap/nonculled : /base/normalmap
{
  technique NormalMapped
  {
    pass Main
    {
     cull_hardware none 
     cull_software none
    }
  }
  
  technique General
  {
    pass Main
    {
     cull_hardware none 
     cull_software none
    }
  }
  technique GeneralDistance
  {
    pass Main
    {
     cull_hardware none 
     cull_software none
    }
  }  
}

material /base/normalmap/specular/nonculled : /base/normalmap/specular
{
  technique NormalMapped
  {
    pass Main
    {
     cull_hardware none 
     cull_software none
    }
  }
  
  technique General
  {
    pass Main
    {
     cull_hardware none 
     cull_software none
    }
  }
  
  technique GeneralDistance
  {
    pass Main
    {
     cull_hardware none 
     cull_software none
    }
  }  
}

material /base/normalmap/nonculled/alpharejected : /base/normalmap/nonculled
{
  technique NormalMapped
  {
    pass Main
    {
     alpha_rejection greater_equal 64
    }
  }
  technique General
  {
    pass Main
    {
     alpha_rejection greater_equal 64
    }
  }
  technique GeneralDistance
  {
    pass Main
    {
     alpha_rejection greater_equal 64
    }
  }
}

material /base/normalmap/specular/nonculled/alpharejected : /base/normalmap/specular/nonculled
{
  technique NormalMapped
  {
    pass Main
    {
     alpha_rejection greater_equal 64
    }
  }
  technique General
  {
    pass Main
    {
     alpha_rejection greater_equal 64
    }
  }
  technique GeneralDistance
  {
    pass Main
    {
     alpha_rejection greater_equal 64
    }
  }
}

material /base/normalmap/specular/nonculled/alphablended : /base/normalmap/specular/nonculled
{
  technique NormalMapped
  {
    pass Main
    {
     scene_blend alpha_blend 
    }
  }
  technique General
  {
    pass Main
    {
     scene_blend alpha_blend 
    }
  }
  technique GeneralDistance
  {
    pass Main
    {
     scene_blend alpha_blend 
    }
  }
}

material /base/normalmap/specular/nonculled/alphablended_modulate : /base/normalmap/specular/nonculled/alphablended
{
  technique NormalMapped
  {
    pass Main
    {
     texture_unit DiffuseMap {
     	colour_op modulate
     }
    }
  }
  technique General
  {
    pass Main
    {
     texture_unit DiffuseMap {
     	colour_op modulate
     }
    }
  }
  technique GeneralDistance
  {
    pass Main
    {
     texture_unit DiffuseMap {
     	colour_op modulate
     }
    }
  }
}


//Base material for waving grass
material /base/wavinggrass
{

	// Vertex program waving grass
	technique
	{
		pass Main
		{
			vertex_program_ref Field/GrassFaderVp
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
				param_named_auto objSpaceLight light_position_object_space 0
				param_named_auto lightColour light_diffuse_colour 0
				param_named_auto offset custom 999
			}
			alpha_rejection greater_equal 64 
			scene_blend alpha_blend
			cull_hardware none
			cull_software none

			// Base diffuse texture map 
			texture_unit DiffuseMap
			{ 
				texture_alias DiffuseMap
			} 
		}
	}

	//receive_shadows off
	technique
	{
		pass Main
		{
			scene_blend alpha_blend 
			cull_hardware none 
			cull_software none
			alpha_rejection greater_equal 64
			// Base diffuse texture map 
			texture_unit DiffuseMap
			{
				texture_alias DiffuseMap
			}
		}
	}

}

