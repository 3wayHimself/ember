
// Vertex program for automatic terrain texture generation
void main_vp__
(
    float4             iPosition           : POSITION,
	float4             iNormal             : NORMAL,
	float2             iTexcoord           : TEXCOORD0,

	out float4         oPosition           : POSITION,
	out float4         oTexcoord           : TEXCOORD0,
	out float4         oCoverage           : TEXCOORD1,
	out float4         oScaled             : TEXCOORD2,
	//out float4         oFog              : TEXCOORD3,

	uniform float4x4   worldViewProj,

	uniform float4     splatSettings,
	uniform float4     fogSettings,
	uniform float4     fogColour
)
{

    float no_rock_factor = clamp (iNormal.y, 0.0, 1.0);

    // SAND  < splatSettings[0]
	oCoverage.x = (iPosition.y < splatSettings[0])?
                    clamp ((1.0 - (iPosition.y / splatSettings[0])) * no_rock_factor, 0.0, 1.0)
                :
                    0.0;

    //  splatSettings[0] < GRASS < splatSettings[0]
	oCoverage.y = (iPosition.y < splatSettings[0])?
                        clamp ((iPosition.y / splatSettings[0])  * no_rock_factor, 0.0, 1.0)
                    :
                       ((iPosition.y < splatSettings[1])?
                            clamp ((1.0 - (iPosition.y - splatSettings[0]) / (splatSettings[1] - splatSettings[0])) * no_rock_factor, 0.0, 1.0)
                        :
                            0.0);


    //  splatSettings[0] < ROCK < splatSettings[0]
	oCoverage.z = (iPosition.y > splatSettings[0])?
                        ((iPosition.y < splatSettings[1])?
                            clamp (((iPosition.y - splatSettings[0]) / (splatSettings[1] - splatSettings[0])) * no_rock_factor, 0.0, 1.0)
                        :
                            clamp ((1.0 - (iPosition.y - splatSettings[1]) / (splatSettings[2] - splatSettings[1])) * no_rock_factor, 0.0, 1.0))
                    :
                        0.0;


    //  splatSettings[1] < SNOW <
	oCoverage.w = (iPosition.y > splatSettings[1])?
                        clamp (((iPosition.y - splatSettings[1]) / (splatSettings[2] - splatSettings[1])) * no_rock_factor, 0.0, 1.0)
                    :
                        0.0;

    float rock_factor = 1.0 - no_rock_factor;
    oCoverage.z = clamp (oCoverage.z + rock_factor, 0.0, 1.0);

    //float fog = clamp(( oPosition.z - fogSettings[0] ) / (fogSettings[1] - fogSettings[0]),0.0,1.0) * fogSettings[2];
    //oColor0 = (1.0 - fog) * (color * (1.0 - rock_factor));
    //oColor1 = (1.0 - fog) * (color * rock_factor);
    //oFog = fogColour * fog;


    // Calculate the output position and texture coordinates
	oPosition  = mul(worldViewProj,iPosition);
	oTexcoord = float4(iTexcoord.x, iTexcoord.y, 0.0, 0.0);
    oScaled = oTexcoord * 20.0f;
}

// Fragment program for automatic terrain texture generation
void main_fp
(
    float4              iTexcoord	: TEXCOORD0,
    float4              iCoverage	: TEXCOORD1,
    float4              iScaled	    : TEXCOORD2,

	out float4          oColor		: COLOR,

    uniform sampler2D   textureUnit0,
    uniform sampler2D   textureUnit1,
    uniform sampler2D   textureUnit2,
    uniform sampler2D   textureUnit3
)
{
	oColor = (tex2D(textureUnit0, iScaled.xy) * iCoverage.x) + (tex2D(textureUnit1, iScaled.xy) * iCoverage.y) + (tex2D(textureUnit2, iScaled.xy) *  iCoverage.z) + (tex2D(textureUnit3, iScaled.xy) *  iCoverage.w);

}


void fog_linear_vp
(
	uniform float4x4   iWorldViewProj,
    float4             iPosition           : POSITION,
	float2             iCoverage           : TEXCOORD0,
	float2             iTexcoord           : TEXCOORD1,
    float4             iColor             : COLOR,
	
	uniform float              iFogStart,
	uniform float              iFogMax,
	uniform float4 iFogParams,
// 	uniform float3 iFogColour,

	out float4         oPosition           : POSITION,
	out float2         oCoverage           : TEXCOORD0,
	out float2         oTexcoord           : TEXCOORD1,
	out float          oFog                : FOG,
// 	out float          oFogFade                : TEXCOORD2,
	out float4         oColour    : COLOR

)
{
	oPosition  = mul(iWorldViewProj,iPosition);
	oCoverage = iCoverage;
	oTexcoord = iCoverage;
	oColour = iColor;
// 	oFogFade = 1;
// 	oFog = oPosition.z;
	oFog = 1 - ((iFogParams.z - oPosition.z)/(iFogParams.z - iFogParams.y));
}


// Fragment program for automatic terrain texture generation
void splat_fp
(
    float2              iCoverage	: TEXCOORD0,
    float2              iTexcoord	: TEXCOORD1,
	float				iFog 		: FOG,
// 	float				iFogFade	: TEXCOORD3,
	
	uniform float3 lightDiffuse,
	uniform float3 lightSpecular,
	uniform float3 lightAmbient,
// 	uniform float4 iFogParams,
	uniform float4 iFogColour,

	out float4          oColor		: COLOR,
	
    uniform float4   iScales[4],
    uniform float iNumberOfLayers, //the number of layers NOTE: this is very inefficient, much better to have many different shaders for the different amount of layers, but we'll do it like this for now while we're developing
    uniform sampler2D   shadowTexture: TEXUNIT0,
    uniform sampler2D   baseTextureDiffuse: TEXUNIT1,
    uniform sampler2D   coverageTexture1: TEXUNIT2,
    uniform sampler2D   splat1TextureDiffuse: TEXUNIT3,
    uniform sampler2D   splat2TextureDiffuse: TEXUNIT4,
    uniform sampler2D   splat3TextureDiffuse: TEXUNIT5,
    uniform sampler2D   splat4TextureDiffuse: TEXUNIT6,
    uniform sampler2D   coverageTexture2: TEXUNIT7,
    uniform sampler2D   splat5TextureDiffuse: TEXUNIT8,
    uniform sampler2D   splat6TextureDiffuse: TEXUNIT9,
    uniform sampler2D   splat7TextureDiffuse: TEXUNIT10,
    uniform sampler2D   splat8TextureDiffuse: TEXUNIT11
)
{
	//tile = 0.0025;
//	float fogFactor   = exp2(-abs(iFog));

	//only do lerp if we can see the pixels (i.e. not when in full fog
 	if (iFog < 1) {
		//iTexcoord = iTexcoord * 16.0f;
		
		oColor = tex2D(baseTextureDiffuse, iTexcoord.xy * iScales[0].x);
		if (iNumberOfLayers > 1) {
			oColor = (lerp(oColor, tex2D(splat1TextureDiffuse, iTexcoord.xy * iScales[0].y), tex2D(coverageTexture1, iCoverage.xy).w));
		}
		if (iNumberOfLayers > 2) {
			oColor = (lerp(oColor, tex2D(splat2TextureDiffuse, iTexcoord.xy * iScales[0].z), tex2D(coverageTexture1, iCoverage.xy).x));
		}
		if (iNumberOfLayers > 3) {
			oColor = (lerp(oColor, tex2D(splat3TextureDiffuse, iTexcoord.xy * iScales[0].w), tex2D(coverageTexture1, iCoverage.xy).y));
		}
		if (iNumberOfLayers > 4) {
 			oColor = (lerp(oColor, tex2D(splat4TextureDiffuse, iTexcoord.xy * iScales[0].x), tex2D(coverageTexture1, iCoverage.xy).z));
 		}
		if (iNumberOfLayers > 5) {
			oColor = (lerp(oColor, tex2D(splat5TextureDiffuse, iTexcoord.xy * iScales[0].y), tex2D(coverageTexture2, iCoverage.xy).w));
		}
		if (iNumberOfLayers > 6) {
			oColor = (lerp(oColor, tex2D(splat6TextureDiffuse, iTexcoord.xy * iScales[0].z), tex2D(coverageTexture2, iCoverage.xy).x));
		}
		if (iNumberOfLayers > 7) {
			oColor = (lerp(oColor, tex2D(splat7TextureDiffuse, iTexcoord.xy * iScales[0].w), tex2D(coverageTexture2, iCoverage.xy).y));
		}
		if (iNumberOfLayers > 8) {
 			oColor = (lerp(oColor, tex2D(splat8TextureDiffuse, iTexcoord.xy * iScales[0].x), tex2D(coverageTexture2, iCoverage.xy).z));
 		} 		
 		//shadow
 		oColor *= tex2D(shadowTexture, iCoverage.xy).x;
 		
// 		float f = (iFogParams.z - iFog)/(iFogParams.z - iFogParams.y);
// 		oColor = lerp(oColor, float4(iFogColour, 1), 1 - f);
		oColor = lerp(oColor, iFogColour, iFog);
	} else {
		oColor = iFogColour;
	}
	
		//only apply fog if there is any
// 		if (iFog > 0) {
// 			oColor = lerp(iFogColour, oColor, 1- iFog);
// //			oColor = lerp(fogColor, oColor, iFog);
// 		}
// 	} else {
// 		oColor = iFogColour;
// // 		oColor.w = iFogFade;
// 	}
		 

}

// Fragment program for automatic terrain texture generation
void splatatlas_fp
(
    float4              iCoverage	: TEXCOORD0,
    float4              iTexcoord	: TEXCOORD1,

	out float4          oColor		: COLOR,

    uniform sampler2D   textureUnit0,
    uniform sampler2D   textureUnit1,
    uniform sampler2D   textureUnit2,
    uniform sampler2D   textureUnit3
)
{
	oColor = tex2D(textureUnit1, float2(iTexcoord.x, (int(iTexcoord.y * 100000) % 100000) * 0.000002));
	
	oColor = (lerp(oColor, tex2D(textureUnit1, float2(iTexcoord.x, ((int(iTexcoord.y * 100000) % 100000) * 0.000002) + 0.2)), tex2D(textureUnit0, iCoverage.xy).w));
	oColor = (lerp(oColor, tex2D(textureUnit1, float2(iTexcoord.x, ((int(iTexcoord.y * 100000) % 100000) * 0.000002) + 0.4)), tex2D(textureUnit0, iCoverage.xy).x));
	oColor = (lerp(oColor, tex2D(textureUnit1, float2(iTexcoord.x, ((int(iTexcoord.y * 100000) % 100000) * 0.000002) + 0.6)), tex2D(textureUnit0, iCoverage.xy).y));
	oColor = (lerp(oColor, tex2D(textureUnit1, float2(iTexcoord.x, ((int(iTexcoord.y * 100000) % 100000) * 0.000002) + 0.8)), tex2D(textureUnit0, iCoverage.xy).z));
	 

}
