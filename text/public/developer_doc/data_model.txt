<p><h1>Data Model</h1></p>
<p>The Data Model allows components and scripts to use and monitor information provided by different services, and to set properties and invoke actions provided by services, through a standardized interface.
This design document takes a closer look at the Data Model, and the standard directory structure it will have in Dime.</p>
<p><h2>Top level structure</h2>
The following is a list of the top level folders in the Data Model.
<br/>
--zzorn</p>
<p><dl></p>
<p><dt>System</dt>
<dd>System data, perhaps OS, etc.</dd></p>
<p><dt>Client</dt>
<dd>Client data, such as name, version number (as major, medium, and minor integers), and so on.</dd></p>
<p><dt>User</dt>
<dd>Not sure about this one.  Could perhaps be used to store user name and contact information, but that might go into preferences too.</dd></p>
<p><dt>Preferences</dt>
<dd>Default user interface, various settings, like default GUI theme, some service specific general settings, and so on.</dd></p>
<p><dt>Servers</dt>
<dd>List of game servers, and information about them.</dd></p>
<p><dt>Accounts</dt>
<dd>Accounts on different servers (multiple accounts on same server possible too).</dd></p>
<p><dt>Avatars</dt>
<dd>Avatars/characters that an account owns on a server.</dd></p>
<p><dt>ControlInterfaces</dt>
<dd>Currently active interfaces for controlling the Avatar(s) and any vehicle, in game device, or other things with control interfaces that they control/use.</dd></p>
<p><dt>WorldViews</dt>
<dd>Information about the part of a world that some group of sensors in a control interface can see and sense.  Contains a list of the entities, an accessor that allows fast access to geometry data, streams of incoming sound events, current weather data, and so on.</dd></p>
<p><dt>Metaservers</dt>
<dd>Contains addresses to one or more metaservers used to find other servers.</dd></p>
<p><dt>MediaServers</dt>
<dd>Contains list of media servers (or sources?), and what media packages they contain.</dd></p>
<p><dt>MediaObjects / MediaCache / MediaPackages / MediaProxy</dt>
<dd>Contains list of current media packages with information about them.  The connection between the media cache/library/archive/store and the game views happens directly on a code level to optimize data transfer and method calls.</dd></p>
<p><dt>Themes</dt>
<dd>GUI themes downloaded by this user.  Uses media from the media archive/cache/proxy.</dd></p>
<p><dt>User interfaces / Layouts</dt>
<dd>Specifications for how to arrange a number of component instances and scripts to provide an user interface for viewing/manipulating some aspect of the game on a part of the screen, and specifying how the whole screen space should be composed of various layouts and components.</dd></p>
<p><dt>Specifications / Program Interfaces / API's </dt>
<dd>List of specifications for various functionality, dialogs / queries sent by the server,
and so on.  Each one has a sub folder containing all registered implementations of it.  One of them is always used.</dd></p>
<p><dt>Plugins</dt>
<dd>Contains a folder for each custom plugin script.  The plugins can be used to provide 
component model features for other scripts from a well defined place.</dd></p>
<p><dt>Services</dt>
<dd></dd></p>
<p><dt>Components</dt>
<dd></dd></p>
<p><dt>Running Components</dt>
<dd>TODO: better name?</dd></p>
<p><dt>Running scripts</dt>
<dd>TODO: better name?</dd></p>
<p><dt>Scripts</dt>
<dd></dd></p>
<p><dt>MainView</dt>
<dd>The root of the tree of visible component tytpes.</dd></p>
<p><dt>Scripts</dt>
<dd></dd></p>
<p><dt>Input bindings?</dt>
<dd></dd></p>
<p><dt>Scheduled taksk?</dt>
<dd></dd></p>
<p></dl></p>
      <br /><br />
    </td>
  </tr>
</table>
