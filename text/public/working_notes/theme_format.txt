    <h1>
      WorldForge UI Theme File Format Proposal
    </h1>
    <h2>
      Abstract
    </h2>
    <p>
      This is a proposal for a format for a theme that can be
      used to create GUI themes that work with many worldForge
      clients (and possibly other programs). Emphasis is given to
      allow complex themes to be created, maximizing artist
      freedom, while keeping the implementation requirements
      relatively simple. Extendability is also emphasized, making
      it easy to support different types of widgets, and not
      placing restrictions on the supported widget set.
    </p>
    <h2>
      Change History
    </h2>
    <p>
      2002-03-16 0.1 Hans H&auml;ggstr&ouml;m zzorn first
      version<br>
    </p>
    <h2>
      Goals
    </h2>
    <p>
      Generic enough to be used with different clients.
    </p>
    <p>
      Expressive enough for allowing great looking game oriented
      UI themes.
    </p>
    <p>
      Flexible enough to be easy to adapt to new widgets and
      other circumstances.
    </p>
    <p>
      Simple enough to not be too complicated to implement in
      clients.
    </p>
    <h2>
      Requirements
    </h2>
    <p>
      No size changes are normally caused by the theme. This way
      layout handling is completely up to the client. <span
      class="todo">TODO: But how does font size affect this for
      example??</span>
    </p>
    <p>
      Themable colors, fonts, backgrounds, and UI event sounds.
    </p>
    <h2>
      Implementation
    </h2>
    <p>
      XML is chosen as the format for describing the theme, as it
      is a widely supported standard for structured information.
    </p>
    <p>
      Delivery could happen in a zip / tar.gz file that contains
      the XML theme description, and necessary bitmaps.
      Alternatively the XML descriptor can be loaded from a media
      server, and contain references to media packages containing
      the required bitmaps.
    </p>
    <h2>
      Structure
    </h2>
    <h3>
      Theme
    </h3>
    <h4>
      Name
    </h4>
    Name of theme 
    <h4>
      Version
    </h4>
    Version of theme (part of package format?) 
    <h4>
      Description
    </h4>
    Short description about this theme 
    <h4>
      Comments
    </h4>
    Various comments by the authors about implementation details
    for future maintainers, or other things that don't belong in
    the description. 
    <h4>
      Authors
    </h4>
    List of authors 
    <h5>
      Author
    </h5>
    <h6>
      Name
    </h6>
    Full name of author 
    <h6>
      Nick
    </h6>
    Nickname or handle of author 
    <h6>
      Email
    </h6>
    Email to author 
    <h6>
      Web site
    </h6>
    URL to authors private website or homepage 
    <h6>
      Contribution
    </h6>
    What this author has contributed to the theme. 
    <h6>
      Description
    </h6>
    Short presentation of the author, e.g. mini biography, ICQ
    number, alternative web sites, quote, silly comments. 
    <h4>
      Scheme
    </h4>
    <h5>
      Target Widgets
    </h5>
    List of widget-state pairs that use this scheme. 
    <h6>
      WidgetStatePair
    </h6>
    WidgetStatePair has a widget and state. A shorthand notation
    of "WidgetName:StateName" is used here, although they are
    encoded as XML attributes or values. 
    <p>
      Examples of widget state pairs are "Button:Pressed" or
      "MenuItem:Disabled".
    </p>
    <p>
      A star can be used to indicate all states or all widgets.
      More specific widget-state pairs always override general
      wildcard based ones however. Example: "*:*" = all states of
      all widgets, "Label:*" = all states of Label widgets,
      "*:Disabled" = the disabled state of all widgets.
    </p>
    <span class="todo">TODO: How to deal with multiple states?
    What about combining multiple states somehow? Pressed,
    Disabled, MouseOver, Focused, Checked, Selected, and so on
    are all orthogonal.</span> 
    <h5>
      Font
    </h5>
    The font to use for the widget, including size, bold,
    italics, etc. 
    <h5>
      Foreground color
    </h5>
    Font color &amp; color of any foreground details (color
    includes alpha value?). 
    <h5>
      Font Effects
    </h5>
    Raised, lowered, etc. 
    <h5>
      Icon Effects
    </h5>
    <p>
      Change Hue, Saturation, Brightness, Transparency, and/or
      colorize towards a given target color.
    </p>
    <p>
      Raised, lowered, and similar edge effects.
    </p>
    <h5>
      Background
    </h5>
    Either has a color, gradient, bitmap, or is split in several
    smaller Background parts. 
    <h6>
      Color
    </h6>
    <h6>
      Gradient
    </h6>
    <h6>
      Bitmap
    </h6>
    <h6>
      Division
    </h6>
    Can be one of: 
    <ol>
      <li>
        Vertical
      </li>
      <li>
        Horizontal
      </li>
      <li>
        2*2 grid
      </li>
      <li>
        3*3 grid
      </li>
    </ol>
    The last two alternatives are for convenience only, they
    could be implemented from the first two. 
    <p>
      The theme can specify the location of each split as
      absolute pixels from an edge, or as a percentage from one
      edge of the original rectangle.
    </p>
    The subdivided parts are Background elements, and can have
    color/gradient/bitmap, or can be further split. 
    <h5>
      Inheriting shemes
    </h5>
    An inheriting sheme uses the properties of the parent sheme,
    unless it overrides one of the properties. 
    <h4>
      Events
    </h4>
    <p>
      Includes state changes (Enabled-&gt;Pressed,
      Pressed-&gt;Enabled, etc..), and any other events that the
      GUI engine wants to expose to the Theme? (perhaps a list of
      different possible events would be nice?). A way to make
      tabbed panel switching sound different from checking a
      checkbox, for example?.
    </p>
    <h5>
      Sounds
    </h5>
    <p>
      Events can trigger sound effects. This way UI sounds can be
      integrated with the theme, which makes sense (a wooden
      theme can sound like pushing wooden buttons, and a crystal
      theme can sound like a crystal theme, etc). however, higher
      level sounds like warning and notice sounds, game and
      client specific noises, etc are not the responsibility of
      the theme, and best implemented in another way. Generally
      most Theme sounds are directly associated with things that
      happen to widgets of different types.
    </p>
    <h5>
      Cross Fading
    </h5>
    It could also be possible to 'cross fade' the attributes of
    two Schemes over some time at certan state changes. That way
    a widget could be highlighted when it gets the focus, and
    fade back to normal colors over a few seconds when it looses
    focus, for example. 
    <p>
      Possibly a cross fade could chain several schemes, to
      produce a flash or similar effects?
    </p>
    <p>
      <span class="todo">TODO: How to handle Borders that are not
      rectangular areas, but instead enclose a rectangular
      area?</span>
    </p>
    <p>
      <span class="todo">TODO: What about stock icons, should the
      theme be able to specify them?</span>
    </p>
    <p>
      <span class="todo">TODO: What about animated icons, colors,
      and/or backgrounds?</span>
    </p>
      <br /><br />
    </td>
  </tr>
</table>

